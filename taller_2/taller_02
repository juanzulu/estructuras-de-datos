#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

/*
  Pasos a seguir:
    1. Definir una clase "Song".
    2. Crear vector de tipo Song.
    3. Leer el archivo de texto de canciones y capturar los datos guardandolos en el vector mencionado con anterioridad
    4. Listar todos los autores presentes, ordenados alfabéticamente
    5. Dado un autor, listar todas sus canciones ordenadas alfabéticamente
    5. Listar todos los álbumes presentes, ordenados cronológicamente.
    7. Dado un álbum, listar todas las canciones que componen un álbum, ordenadas alfabéticamente por el nombre
de la canción.
    8. Listar todas las canciones y su álbum, ordenadas alfabéticamente primero por el álbum y después por el
nombre de la canción.
*/

class Song {
  public:
      string name, author, genero, album;
      int year;
      float calificacion;
};

//funcion leer songs
void leerSongs(vector <Song> &songs)
{   
  Song auxSong;
  string fileName = "example.txt";
  ifstream archivoSongs(fileName);
  string line;
  string word;
  int i=0;
  int canti;
  char delimiter = '|';
  
  getline(archivoSongs, line);
  canti = stoi(line);
    
  //Lee el archivo txt
  while(getline(archivoSongs,line))
  {
    stringstream str(line);
    getline( str, word,delimiter);
    auxSong.name = word;
    
    getline( str, word,delimiter);
    auxSong.author = word;
   
    getline( str, word,delimiter);
    auxSong.genero = word;
    
    getline( str, word,delimiter);
    auxSong.album = word;
    
    getline( str, word,delimiter);
    auxSong.year = stoi(word);
    
    
    //Guardar la cancion en la estructura de datos de herramientas
    songs.push_back(auxSong);
  }
}


//Funcoon impirmir
void imprimirSongs(vector <Song> &songs)
{
  cout << "La cantidad de canciones guardadas es " << songs.size();
  cout << endl << "Datos de las canciones guardadas:" << endl;
  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
    cout << "Nombre: " << it->name <<endl;
    cout << "Autor: " << it->author <<endl;
    cout << "Genero: " << it->genero <<endl;
    cout << "Album: " << it->album <<endl;
    cout << "Año: " << it->year <<endl;
  }
}


//Funcion compara nombre autor
bool compararPorNombreAutor(const Song& a, const Song& b)
{
  return a.author < b.author;
}


//funcion para listar autores
void listarAutores(vector<Song> /*&*/songs){
  sort(songs.begin(), songs.end(), compararPorNombreAutor);
  cout << "------- Vector ordenado por: Nombres de autor -------" << endl;
  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
    cout << it->author <<endl;
  }
}

//Funcion compara nombre song
bool compararPorNombreSong(const Song& a, const Song& b) 
{
  return a.name < b.name;
}


// song por autor 
void songsXAutor(vector<Song> &songs, vector<Song> &SongsXAutor)
{
  string autorBuscar;
  
  cout << "Ingrese el nombre del autor: ";
  cin >> autorBuscar;
  
  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
    if(it->author==autorBuscar)
    {
      SongsXAutor.push_back(*it);
    }
  }

  //Organizar alfabéticamente el vector de las canciones que pertenecen al autor que se está buscando
  sort(SongsXAutor.begin(), SongsXAutor.end(), compararPorNombreSong);
  cout << "------- Vector ordenado por: Nombre de canciones -------" << endl;
  for (vector<Song>::iterator it = SongsXAutor.begin(); it != SongsXAutor.end(); it++) 
  {
    cout << it->author << "=" << it->name <<endl;
  }
}

//funcion para comparar por year
bool compararPorYear(const Song& a, const Song& b) 
{
  return a.year < b.year;
}

//funcion para poder comparar
bool comparar(Song a, Song b) 
{
  if(a.album < b.album) 
  {
    return true;
  }
  else if(a.album == b.album) 
  {
    if(a.name < b.name) 
    {
      return true;
    }
  }
  return false;
}


//funcon album por year
void AlbumXyear(vector<Song> &songs, vector<Song> &SongsXAlbum)
{
  bool encontrado;
  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
    encontrado = false;
    // Guardar los album sin repeticion en un nuevo vector
    for (vector<Song>::iterator it2 = SongsXAlbum.begin(); it2 != SongsXAlbum.end(); it2++)
    {
      if(it->album == it2->album)
      {
        encontrado = true;
      }
    }
    if(encontrado==false)
    {
      SongsXAlbum.push_back(*it);
    }
  }

  //Organizar alfabéticamente el vector de las canciones que pertenecen al autor que se está buscando
  sort(SongsXAlbum.begin(), SongsXAlbum.end(), compararPorYear);
  cout << "------- Vector ordenado por: Año del album: -------" << endl;
  for (vector<Song>::iterator it = SongsXAlbum.begin(); it != SongsXAlbum.end(); it++) 
  {
    cout << it->album << "=" << it->year <<endl;
  }
}

//fucnion sog por album
void songsXAlbum(vector<Song> songs, queue <Song> &SongsXalbum)
{
  string albumBuscar;
  //Ordenar el vector de canciones 
  sort(songs.begin(), songs.end(), compararPorNombreSong);

  cout << "Nombre del album:";
  cin >> albumBuscar;
    
  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
    if(it->album==albumBuscar)
    {
      SongsXalbum.push(*it);
    }
  }
}



//funcion albums y songs
void AlbumANDsong(vector<Song> songs, queue<Song> &AlbumANDSong)
{
  //Se ordena el vector original por album y canciones para luego guardarlo en la cola de canciones ordenada igualmente
  sort(songs.begin(), songs.end(), comparar);

  for (vector<Song>::iterator it = songs.begin(); it != songs.end(); it++) 
  {
      AlbumANDSong.push(*it);
  }
}


int main() {
 //Declaración de estructuras 
  vector <Song> songs;
  vector <Song> SongsXAutor;
  vector <Song> album;
  queue <Song> SongsXalbum;
  queue <Song> AlbumANDSong;
  
  int opcion;

  //Lectura de canciones
  leerSongs(songs);
  //Imprimir canciones
  imprimirSongs(songs);
  

  // Menú
  do
  {
    cout<< endl;
    cout<<"1. Listar todos los autores presentes, ordenados alfabéticamente"<<endl;
    cout<<"2. Dado un autor, listar todas sus canciones ordenadas alfabéticamente"<<endl;
    cout<<"3. Listar todos los álbumes presentes, ordenados cronológicamente"<<endl;
    cout<<"4. Dado un álbum, listar todas las canciones que componen un álbum, ordenadas alfabéticamente por el nombre de la canción" <<endl;
    cout<<"5. Listar todas las canciones y su álbum, ordenadas alfabéticamente primero por el álbum y después por el nombre de la canción"<<endl;
    cout<<"6. salir"<<endl;
    cin>>opcion;
    
    switch (opcion)
    {
        case 1:
          listarAutores(songs);   
          break; 
        
        case 2:
          songsXAutor(songs, SongsXAutor);
          break; 
            
        case 3: 
          AlbumXyear(songs, album); 
          break; 
        
        case 4:
          songsXAlbum(songs, SongsXalbum); 
          
          // Imprimir las canciones del album
          cout << "Canciones de un album ordenadas alfabeticamente: " << endl;
          while(!SongsXalbum.empty()) {
            cout << "Album: " << SongsXalbum.front().album << " Cancion: " <<  SongsXalbum.front().name << endl;
            SongsXalbum.pop();
          }
          break;  
         
        case 5:
          AlbumANDsong(songs, AlbumANDSong);
          cout << "Canciones organizadas por album y por canciones: " << endl;
          while(!AlbumANDSong.empty()) {
            cout << "Album: " << AlbumANDSong.front().album << " Cancion: " <<  AlbumANDSong.front().name << endl;
            AlbumANDSong.pop();
          }
          break;
    
        case 6:
          cout<<"Fin del Programa";
          break; 
        default:
          cout<<"\nError, por favor intente nuevo\n";
          break;
    }
  } while(opcion!=6);
    return 0;
}
  
